<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kh.dndncare.member.model.dao.MemberMapper">

	<!-- <select id="login" resultType="Member">
		select *
	 	from member
	 	where member_status = 'N' and member_id=#{memberId}
	</select> -->
	
	
	  <select id="login" resultType="Member">
	  	select *
	  	from member
	  	where member_status = 'N' and member_id=#{memberId}
	  </select>
	  	  
	  <select id="getDelMemberNo" resultType="int">
	  	select member_no
	  	from member
	  	where member_no NOT IN (select member_no from caregiver union select member_no from patient)	 
	  			and member_category != 'A'
	  </select>
	  	  
	  
	  <!-- 회원가입 중도탈출 멤버 데이터 지우기 -->
	  <delete id="noInfomemberdle" >
	  	delete member
	  	where member_no = #{memberNo}
	  </delete>
	  	  
	  
	  <!-- 아이디 중복 확인 -->
	  <select id="idCheck" resultType="_int">
	  	select count(*)
	  	from member
	  	where member_id = #{id}	  
	  </select>
	  
	  <!-- 닉네임 중복 확인 -->
	  <select id="nickNameCheck" resultType="_int">
	  	select count(*)
	  	from member
	  	where member_nickname = #{nickNameCheck}	  
	  </select>
	  
	  
	<!-- ResultMap : 캘린더에 적합도록 매핑 -->
	<resultMap type="CalendarEvent" id="calendarResultMap">
		<id column="MAT_NO" property="matNo"/>
	  	<result column="TITLE" property="title"/>
		<result column="BEGIN_DT" property="start"/>
		<result column="END_DT" property="end"/>
		<result column="MONEY" property="money"/>
		<result column="HOSPTAL_NO" property="hosptalNo"/>
		<result column="HOSPTAL_ADDRESS" property="hosptalAddress"/>
		<result column="HOSPTAL_NAME" property="hosptalName"/>
	</resultMap>
	  
	  
	<select id="caregiverCalendarEvent" resultType="CalendarEvent">
		SELECT 	M.MAT_NO, MONEY, BEGIN_TIME, END_TIME, MAT_MODE, BEGIN_DT, END_DT,
		        PT_NO, 
		        SUBSTR(REPLACE(MAT_ADDRESS_INFO, '//', ' ') , INSTR(REPLACE(MAT_ADDRESS_INFO, '//', ' '), ' ')+1) AS MAT_ADDRESS_INFO, 
		        PT_COUNT, MAT_DATE, H.HOSPITAL_NO, H.HOSPITAL_NAME
		FROM MATCHING M
		        LEFT JOIN MAT_PT_INFO I ON(M.MAT_NO = I.MAT_NO)
		        LEFT JOIN MATCHING_DATE D ON(I.MAT_NO = D.MAT_NO)
		        JOIN HOSPITAL H ON(H.HOSPITAL_NO = M.HOSPITAL_NO)
		WHERE M.MEMBER_NO = ${memberNo} AND M.MAT_CONFIRM = 'Y'
	</select>
	
	  <select id="selectAllMember" resultType="Member">		<!-- 멤버좀 확인할라구요 -->
		select *
		from member	  
	  </select>
	  

	  <!-- 회원가입1(member) -->
	  <insert id="enroll"  useGeneratedKeys="true">
	  	<selectKey resultType="_int" keyProperty="memberNo" order="BEFORE">
	  		select seq_mid.nextval from dual 
	  	</selectKey>
	  	insert into member
	  	values(#{memberNo}, #{memberId}, #{memberPwd}, #{memberName}, #{memberGender}, 
	  			#{memberNickName}, #{memberAge}, #{memberPhone}, #{memberEmail}, sysdate,
	  		 	#{memberAddress}, #{memberCategory}, 'N', #{memberNational}, null, sysdate)  	
	  </insert>
	  
	  
	  <!-- 회원가입2(CareGiver) -->
	  <insert id="enrollCareGiver">
	  	insert into caregiver
	  	values(#{memberNo}, #{careImg}, #{careIntro}, 
	  			#{minMoney}, #{maxMoney}, #{careJoinStatus}, sysdate)	  
	  </insert>
	  
	 <!-- 정보 입력-->
	<insert id="enrollInfoCategory">
		<foreach collection="memberInfo" item="item"  open="INSERT ALL" close="SELECT * FROM DUAL">
			into member_Info values(#{memberNo}, #{item})
		</foreach>
	</insert>
	  
	  
	<!-- 회원가입3(Patient) -->
	<insert id="enrollPatient">
	  	insert into patient
	  	values(seq_pid.nextval, #{memberNo}, #{ptName}, #{ptGender}, #{ptAge}, 
	  			#{ptWeight}, #{ptHeight}, #{ptAddress}, #{ptRequest}, sysdate)	  
	  </insert>
	  
	  <select id="findIdResult" resultType="Member">
	  	select member_id,member_create_date,member_status,member_category,member_name
	  	from member
	  	where member_name=#{memberName} and member_phone=#{memberPhone}
	  </select>
	  
	  <!-- 환자정보 가져오기 -->
	  <select id="selectPatient" resultType="Patient">
	  	select *
	  	from patient
	  	where member_no = #{memberNo}
	  </select>
	  
	  <!-- 환자 인포카테고리 -->
	  <update id="updatePassword">
	  	update member
	  	set member_pwd = #{newPwd} , member_update_date = sysdate
	  	where member_id = #{memberId}
	  </update>
	  
	  <!-- 간병인정보 가져오기 -->
	  <select id="selectCareGiver" resultType="CareGiver">
	  	select *
	  	from CAREGIVER
	  	where member_no = #{memberNo}
	  </select>
	  
	  
	  
	
	<!-- 간병인 메인페이지에서의 자동 추천을 위한 간병인 본인 정보 조회 -->
	<select id="getCaregiverInfo" resultType="map">
		SELECT 	DECODE(MEMBER_GENDER, 'M', '남성', 'F', '여성') AS "성별", 
		        EXTRACT(YEAR FROM TO_DATE(SYSDATE, 'RRRR-MM-DD')) - EXTRACT(YEAR FROM TO_DATE(MEMBER_AGE, 'RRRR-MM-DD')) AS "나이",
		        SUBSTR(REPLACE(MEMBER_ADDRESS, '//', ' ') , INSTR(REPLACE(MEMBER_ADDRESS, '//', ' '), ' ')+1) AS "주소",
		        MEMBER_NATIONAL AS "국적",
		        CARE_JOIN_STATUS, MIN_MONEY AS "최소금액"
		FROM MEMBER M
		        JOIN CAREGIVER C ON(M.MEMBER_NO = C.MEMBER_NO) 
		WHERE M.MEMBER_NO = ${memberNo}
	</select>
	
	<!-- 간병인 메인페이지에서의 자동 추천을 위한 간병인 본인 정보 조회 : 2번 -->
	<select id="getCaregiverExp" resultType="map">
		SELECT L_CATEGORY, S_CATEGORY
		FROM MEMBER
		        JOIN MEMBER_INFO USING(MEMBER_NO)
		        JOIN INFO_CATEGORY USING(CATEGORY_NO)
		WHERE MEMBER_NO = ${memberNo}
	</select>
	
	<!-- 간병인 메인페이지에서의 자동 추천을 위한 환자 후보군의 정보 조회 : 1번 -->
	<select id="selectPatientList" resultType="Patient">
		SELECT *
		FROM   (SELECT  MEMBER.MEMBER_NO, PT_NAME, PT_GENDER,  
		                EXTRACT(YEAR FROM TO_DATE(SYSDATE, 'RRRR-MM-DD')) - EXTRACT(YEAR FROM TO_DATE(MEMBER_AGE, 'RRRR-MM-DD')) AS PT_REAL_AGE, 
		                MEMBER_NATIONAL, PT_WEIGHT, PT_HEIGHT,
		                MAT_NO, BEGIN_DT, END_DT, MONEY,
		                SUBSTR(REPLACE(MAT_ADDRESS_INFO, '//', ' ') , INSTR(REPLACE(MAT_ADDRESS_INFO, '//', ' '), ' ')+1) as PT_ADDRESS, 
		                SERVICE, MAT_REQUEST, PT_COUNT
			   FROM MATCHING 
			        JOIN MAT_PT_INFO USING(MAT_NO)
			        JOIN PATIENT USING(PT_NO)
			        JOIN MEMBER ON(PATIENT.MEMBER_NO = MEMBER.MEMBER_NO)
		   WHERE MEMBER_STATUS = 'N' AND MAT_CONFIRM='N' AND MAT_ADDRESS_INFO LIKE '%${address}%'
		   <if test='joinStatus.equals("N")'>
		   			AND PT_COUNT = 1
		   </if>
		   ORDER BY DBMS_RANDOM.RANDOM)
		WHERE ROWNUM <![CDATA[<]]> ${selectNum}+1
	</select>
	
	<delete id="deleteWantInfo">		<!-- 내가원하는 상대매칭정보 -->
		delete want_info
		where member_no = #{memberNo}
		
	</delete>
	
	<insert id="insertWantInfo">		<!-- 내가 원하는 상대매칭 정보 -->
	insert into want_info values(
		${memberNo},
		${categoryNo}
	)
	
	</insert>
	
	<delete id="deleteMemberInfo">		<!-- 내 인포정보 -->
		delete member_info
		where member_no = #{memberNo}
		
	</delete>
	
	<insert id="insertMemberInfo">		<!-- 내 인포정보 -->
	insert into member_info values(
		${memberNo},
		${categoryNo}
	)
	</insert>
	
	<select id="selectWantInfo" resultType="map">
		SELECT L_CATEGORY, S_CATEGORY
		FROM MEMBER
		        JOIN want_INFO USING(MEMBER_NO)
		        JOIN INFO_CATEGORY USING(CATEGORY_NO)
		WHERE MEMBER_NO = ${memberNo}
	</select>
	
	<!-- 간병인 메인페이지에서의 자동 추천을 위한 환자 후보군의 정보 조회 : 2번 -->
	<select id="getPatientInfo" resultType="map">
		SELECT MEMBER_NO, L_CATEGORY, S_CATEGORY
		FROM MEMBER
		        JOIN MEMBER_INFO USING(MEMBER_NO)
		        JOIN INFO_CATEGORY USING(CATEGORY_NO)
		WHERE MEMBER_NO IN  
		<foreach collection="list" item="item" open="(" close=")" separator=", ">${item}</foreach>
	</select>
	
	<update id="updatePatient">
		update patient
		set pt_name = #{ptName}, pt_age = #{ptAge}, pt_weight = #{ptWeight}, pt_height = #{ptHeight}, pt_address = #{ptAddress}, pt_gender = #{ptGender}, pt_update_date = sysdate, pt_request = #{ptRequest}
		where member_no = #{memberNo}
	</update>
	
	<update id="updateMember">
		update member
		set member_Name = #{memberName}, member_gender = #{memberGender},
		member_nickName = #{memberNickName}, member_age= #{memberAge},
		member_phone = #{memberPhone},member_email = #{memberEmail},
		member_address = #{memberAddress},member_national = #{memberNational},
		member_update_date = sysdate
		where member_no = #{memberNo}
	</update>
	
	<update id="updateCareGiver">
		update caregiver
		set care_intro = #{careIntro}, min_money = #{minMoney}, max_money = ${maxMoney},care_Update_Date = sysdate, care_join_status = #{careJoinStatus}
		where member_no = #{memberNo}
	</update>
	
	<update id="updateMemberVer2">
		update member
		set member_name = #{memberName}, member_gender = #{memberGender},member_age = #{memberAge}
		where member_no =#{memberNo}	

	</update>

	<select id="mySelectBoardList" resultType="Board">
		select board_no, category_name, board_title, area_name, board_create_date, board_count
			from board
				join b_category using(category_no)
				join area using(area_no)
				join member using(member_no)
			where member_no = #{mNo}and board_status = 'Y'
	</select>
	
	<select id="getBoardListCount" resultType="_int">
		select count(*)
        from board b
   	    where b.board_status = 'Y' and member_no = #{mNo}
   	   </select>
	
	<select id="boardLikeCount" resultType="_int">
		select count(*)
		from board_like
			join board using(board_no)
		where board_no = #{boardNo} and board_status = 'Y'
	</select>
	
	<select id="getReplyListCount" resultType="_int">
		select count(*)
		from reply r
		where r.reply_status = 'Y' and member_no = #{mNo}
	</select>
	
	<select id="mySelectReplyList" resultType="Reply">
		select b.board_title,r.ref_board_no, c.category_name, r.reply_content, r.reply_create_date, r.reply_no
		from board b
			join b_category c on(c.category_no = b.category_no)
			join reply r on(board_no = ref_board_no)
		where b.member_no = #{mNo} and r.reply_status = 'Y'
	</select>
	
	<select id="replyLikeCount" resultType="_int">
		select count(*)
		from reply_like l
			join reply r on(r.reply_No = l.reply_No)
		where l.reply_no = #{replyNo} and r.reply_status = 'Y'
	</select>
	
	<select id="getLikeListCount" resultType="_int">
		select count(*)
		from board_like l
			join board b on(b.board_no = l.board_no)
		where b.board_status = 'Y' and l.member_no = #{mNo}
	</select>
	
	<select id="mySelectLikeList" resultType="Board">
		select b.board_no, c.category_name, b.board_title, a.area_name, b.board_create_date, b.board_count
		from board b
			join board_like l on(b.board_no = l.board_no)
			join b_category c on(c.category_no = b.category_no)
			join area a on(a.area_no = b.area_no)
		where l.member_no = #{mNo} and b.board_status = 'Y'
	</select>
	
	<select id="likeLikeCount" resultType="_int">
		select count(*)
		from board_like l
			join board b on(l.board_no = b.board_No)
		where l.board_no = #{boardNo} and b.board_status = 'Y'
	</select>
	
	<select id="selectMatList" resultType="MatMatptInfo">	<!-- 환자번호로 mat_pt테이블의 매칭번호를 뽑아온다. -->
		select *
		from mat_pt_info
    		left join matching ON mat_pt_info.mat_no = matching.mat_no
            left join member on matching.member_no =member.member_no
            left join caregiver on matching.member_no = caregiver.member_no
            left join matching_date on matching.mat_no = matching_date.mat_no
		where mat_confirm != 'N' and pt_no = #{ptNo}
	</select>
	<!-- 추천된 환자 정보조회 : 이름, 성별, 나이, 지역, 금액 -->
	<select id="choicePatientList" resultType="Patient">
		SELECT  PATIENT.MEMBER_NO, PT_NAME, PT_GENDER, PT_NO,  
		        EXTRACT(YEAR FROM TO_DATE(SYSDATE, 'RRRR-MM-DD')) - EXTRACT(YEAR FROM TO_DATE(PT_AGE, 'RRRR-MM-DD')) AS PT_REAL_AGE, 
		        MAT_NO, BEGIN_DT, END_DT, MONEY,
		        SUBSTR(REPLACE(MAT_ADDRESS_INFO, '//', ' ') , INSTR(REPLACE(MAT_ADDRESS_INFO, '//', ' '), ' ')+1) as PT_ADDRESS, 
		        SERVICE, MAT_REQUEST, PT_COUNT
		FROM MATCHING 
		    JOIN MAT_PT_INFO USING(MAT_NO)
		    JOIN PATIENT USING(PT_NO)
	    WHERE MAT_NO IN 
		<foreach collection="list" item="item" open="(" close=")" separator=", ">
			${item}
		</foreach>
	</select>
	
	<!-- 간병인이 원하는 정보조회 -->
	<select id="getCaregiverWant" resultType="map">
		SELECT L_CATEGORY, S_CATEGORY
		FROM MEMBER M
		        JOIN WANT_INFO W ON(M.MEMBER_NO = W.MEMBER_NO)
		        JOIN INFO_CATEGORY I ON(W.CATEGORY_NO = I.CATEGORY_NO)
		WHERE M.MEMBER_NO = ${memberNo}
	</select>	
	
	<!-- 매칭 + 환자 정보 다 가져오기  -->
	<select id="getMatMatptInfoPt" resultType="MatMatptInfoPt">
		select *
		from matching
			join mat_pt_info on(matching.mat_no = mat_pt_info.mat_no) 	
			join patient on(mat_pt_info.pt_no = patient.pt_no)	
			left join hospital on(hospital.hospital_no = matching.hospital_no)
		where matching.mat_confirm = 'N' and matching.begin_dt > sysdate 
			and matching.member_no is null
		order by matching.begin_dt
	</select>
	
	<!-- loginUser(간병인)에게 매칭을 신청한 대상 이름 불러오기 -->
	<select id="getRequestMatPt" resultType="RequestMatPt">
		select matching.mat_no, patient.pt_name, 
				patient.pt_gender, patient.pt_age,
				matching.pt_count, mat_pt_info.service,
				mat_pt_info.group_leader
		from matching
			join mat_pt_info on(matching.mat_no = mat_pt_info.mat_no)
			join patient on(mat_pt_info.pt_no = patient.pt_no)
		where matching.member_no = #{memberNo}	
				and matching.mat_confirm = 'N'
				and matching.begin_dt > sysdate
	</select>
	


	<select id="selectCareGiverList" resultType="CareGiver">	<!-- 간병인정보를 모두 불러온다.(재가공할거지만) -->
		select *
		from careGiver
			left join member on(careGiver.member_no = member.member_no)
            
			where member_status = 'N'
		ORDER BY 2 asc, 1 desc
	</select>

	
	<select id="selectSocialLogin" resultType="Member">
		select *
		from member
		where member_social_token = #{code}
	</select>
	
	<!-- 내가 작성한 리뷰조회 -->
	<select id="reviewList" resultType="CareReview">
		select distinct review_no, c.pt_no, c.mat_no, review_content, review_score, review_create_date, review_update_date, m.member_name
		from care_review c
		    left join member m on(c.member_no = m.member_no)
		    left join mat_pt_info mpi on(mpi.pt_no = c.pt_no)
		    left join matching mc on(mc.mat_no = mpi.mat_no)
		where review_status = 'Y' and c.pt_no=#{ptNo}
	</select>
	
	<select id="selectReviewList" resultType="CareReview">
		select *
		from care_review
		where review_no = #{reviewNo}
	</select>
	
	<!-- 환자번호 -->
	<select id="getPtNo" resultType="_int">
		select pt_no
		from patient
		where member_no=#{memberNo}
	</select>
	
	<!-- 환자 메인 : 환자 본인 정보 조회 1번 -->
	<select id="getPatientMyInfo" resultType="map">
		select DECODE(pt_gender, 'M', '남성', '여성') AS "성별", 
				EXTRACT(YEAR FROM TO_DATE(SYSDATE, 'RRRR-MM-DD')) - EXTRACT(YEAR FROM TO_DATE(MEMBER_AGE, 'RRRR-MM-DD')) AS "연령",
		        SUBSTR(REPLACE(PT_ADDRESS, '//', ' ') , INSTR(REPLACE(PT_ADDRESS, '//', ' '), ' ')+1) as "주소",
		        pt_height AS "키", pt_weight AS "몸무게",
		        member_national AS "국적"
		from member 
		        join patient using(member_no)
		where member_no = ${memberNo}
	</select>
	
	<select id="getPatientMyExp" resultType="map">
		SELECT L_CATEGORY, S_CATEGORY
		FROM MEMBER
		        JOIN MEMBER_INFO USING(MEMBER_NO)
		        JOIN INFO_CATEGORY USING(CATEGORY_NO)
		WHERE MEMBER_NO = ${memberNo}
	</select>
	
	<select id="getCaregiverMyWant" resultType="map">
		SELECT L_CATEGORY, S_CATEGORY
		FROM MEMBER
		        JOIN WANT_INFO USING(MEMBER_NO)
		        JOIN INFO_CATEGORY USING(CATEGORY_NO)
		WHERE MEMBER_NO = ${memberNo}
	</select>
	
	<select id="selectCaregiverList" resultType="map">
		SELECT *
		FROM (  SELECT MEMBER_NO AS "회원번호", DECODE(MEMBER_GENDER, 'M', '남성', '여성') AS "성별", 
		                EXTRACT(YEAR FROM TO_DATE(SYSDATE, 'RRRR-MM-DD')) - EXTRACT(YEAR FROM TO_DATE(MEMBER_AGE, 'RRRR-MM-DD')) AS "연령", 
		                SUBSTR(REPLACE(MEMBER_ADDRESS, '//', ' ') , INSTR(REPLACE(MEMBER_ADDRESS, '//', ' '), ' ')+1) as "주소",
		                MEMBER_NATIONAL AS 국적, MIN_MONEY AS "최소요구금액"
		        FROM MEMBER
		                JOIN CAREGIVER USING(MEMBER_NO)
		        WHERE MEMBER_STATUS = 'N' AND MEMBER_ADDRESS LIKE '%${address}%'
		        ORDER BY DBMS_RANDOM.RANDOM)
		WHERE ROWNUM <![CDATA[<]]> ${selectNum}+1
	</select>
	
	<select id="selectCaregiverInfo" resultType="map">
		SELECT MEMBER_NO, L_CATEGORY, S_CATEGORY
		FROM MEMBER
		        JOIN MEMBER_INFO USING(MEMBER_NO)
		        JOIN INFO_CATEGORY USING(CATEGORY_NO)
		WHERE MEMBER_NO IN 
		<foreach collection="list" item="item" open="(" close=")" separator=",">${item}</foreach>
	</select>
	
	<select id="choiceCaregiverList" resultType="Caregiver">
		SELECT MEMBER_NO, MEMBER_GENDER, MEMBER_NAME,
		        EXTRACT(YEAR FROM TO_DATE(SYSDATE, 'RRRR-MM-DD')) - EXTRACT(YEAR FROM TO_DATE(MEMBER_AGE, 'RRRR-MM-DD')) AS "caregiverRealAge",
		        SUBSTR(REPLACE(MEMBER_ADDRESS, '//', ' ') , INSTR(REPLACE(MEMBER_ADDRESS, '//', ' '), ' ')+1) as "caregiverAddress",
		        MEMBER_NATIONAL AS "caregiverNational", MIN_MONEY
		FROM MEMBER
		        JOIN CAREGIVER USING(MEMBER_NO)
		WHERE MEMBER_NO IN
		<foreach collection="list" item="item" open="(" close=")" separator=",">${item}</foreach>
	</select>
	
	<select id="getPatientEvent" resultType="map">
		SELECT MATCHING.MAT_NO, MATCHING.MEMBER_NO
		FROM MATCHING 
		        JOIN MAT_PT_INFO ON(MATCHING.MAT_NO = MAT_PT_INFO.MAT_NO)
		        JOIN PATIENT ON(MAT_PT_INFO.PT_NO = PATIENT.PT_NO)
		        JOIN MEMBER ON(PATIENT.MEMBER_NO = MEMBER.MEMBER_NO)
		WHERE MAT_CONFIRM = 'Y' AND MEMBER.MEMBER_NO = ${memberNo}
	</select>
	
	<select id="patientCalendarEvent" resultType="CalendarEvent">
		SELECT MATCHING.MAT_NO, BEGIN_DT, END_DT, BEGIN_TIME, END_TIME, MONEY, MATCHING.MEMBER_NO AS CAREGIVER_NO, MAT_DATE, MAT_MODE, PT_COUNT,
		        SUBSTR(REPLACE(MAT_ADDRESS_INFO, '//', ' ') , INSTR(REPLACE(MAT_ADDRESS_INFO, '//', ' '), ' ')+1) AS MAT_ADDRESS_INFO,
		        HOSPITAL_NAME
		FROM MATCHING 
		        LEFT JOIN MATCHING_DATE ON(MATCHING.MAT_NO = MATCHING_DATE.MAT_NO)
		        JOIN MAT_PT_INFO ON(MATCHING.MAT_NO = MAT_PT_INFO.MAT_NO)
		        JOIN HOSPITAL ON(HOSPITAL.HOSPITAL_NO = MATCHING.HOSPITAL_NO)
		WHERE MATCHING.MAT_NO IN 
		<foreach collection="list" item="item" open="(" close=")" separator=",">${item}</foreach>
	</select>
	
	<!-- MEMBER_NO, MEMBER_NAME, MEMBER_GENDER, MEMBER_AGE -->
	<select id="selectMemberList" resultType="Member">
		SELECT MEMBER_NO, MEMBER_NAME, MEMBER_GENDER, 
				EXTRACT(YEAR FROM TO_DATE(SYSDATE, 'RRRR-MM-DD')) - EXTRACT(YEAR FROM TO_DATE(MEMBER_AGE, 'RRRR-MM-DD')) AS "memberRealAge"
		FROM MEMBER
		WHERE MEMBER_NO IN
		<foreach collection="list" item="item" open="(" close=")" separator=",">${item}</foreach>
	</select>
	
	<select id="getMatchingListCount" resultType="_int">
		<!-- SELECT COUNT(*)
		FROM MATCHING
		WHERE MAT_CONFIRM = 'N' -->
		SELECT COUNT(DISTINCT MATCHING.MAT_NO)
		FROM MATCHING JOIN MAT_PT_INFO ON(MATCHING.MAT_NO = MAT_PT_INFO.MAT_NO)
		WHERE MAT_CONFIRM = 'N' 
		        AND (MATCHING.MAT_NO ,MATCHING.PT_COUNT) IN (SELECT MAT_PT_INFO.MAT_NO, COUNT(*) FROM MAT_PT_INFO GROUP BY MAT_PT_INFO.MAT_NO)
		        AND MATCHING.BEGIN_DT <![CDATA[>]]> SYSDATE
	</select>
	
	<!-- 간병인의 일감찾기(검색조건X) : 매칭정보 조회 -->
	<select id="selectMatchingList" resultType="Matching">
		<!-- SELECT MATCHING.MAT_NO,PT_COUNT, BEGIN_DT, END_DT, BEGIN_TIME, END_TIME, MAT_MODE
		FROM MATCHING
		WHERE MAT_CONFIRM = 'N' -->
		SELECT DISTINCT MATCHING.MAT_NO, PT_COUNT, BEGIN_DT, END_DT, BEGIN_TIME, END_TIME, MAT_MODE
		FROM MATCHING JOIN MAT_PT_INFO ON(MATCHING.MAT_NO = MAT_PT_INFO.MAT_NO)
		WHERE MAT_CONFIRM = 'N' 
		        AND (MATCHING.MAT_NO ,MATCHING.PT_COUNT) IN (SELECT MAT_PT_INFO.MAT_NO, COUNT(*) FROM MAT_PT_INFO GROUP BY MAT_PT_INFO.MAT_NO)
		        AND MATCHING.BEGIN_DT <![CDATA[>]]> SYSDATE
		<if test="resultMatNoList != null">
			AND MAT_NO IN
			<foreach collection="list" item="item" open="(" close=")" separator=",">${item}</foreach>
		</if>
		ORDER BY BEGIN_DT
	</select>
	
	<select id="searchMatchingList" resultType="Matching">
		SELECT MATCHING.MAT_NO,PT_COUNT, BEGIN_DT, END_DT, BEGIN_TIME, END_TIME, MAT_MODE
		FROM MATCHING
		WHERE MAT_CONFIRM = 'N'
				AND MAT_NO IN
				<foreach collection="list" item="item" open="(" close=")" separator=",">${item}</foreach>
		ORDER BY BEGIN_DT
	</select>
	
	
	
	
	<select id="selectMatchingPTInfoList" resultType="MatPtInfo">
		SELECT  MATCHING.MAT_NO, SERVICE,
		        SUBSTR(REPLACE(MAT_ADDRESS_INFO, '//', ' ') , INSTR(REPLACE(MAT_ADDRESS_INFO, '//', ' '), ' ')+1) AS MAT_ADDRESS_INFO,
		        HOSPITAL_NAME
		FROM MATCHING
		        JOIN MAT_PT_INFO ON(MATCHING.MAT_NO = MAT_PT_INFO.MAT_NO)
		        JOIN HOSPITAL USING(HOSPITAL_NO)
		WHERE MATCHING.MAT_NO IN 
		<foreach collection="list" item="item" open="(" close=")" separator=",">${item}</foreach>
	</select>
	
	
	<!-- 간병인의 일감찾기(검색조건X) : 환자정보 조회 -->
	<select id="selectMatchingMemberList" resultType="Patient">
		SELECT MATCHING.MAT_NO, PATIENT.MEMBER_NO, PATIENT.PT_NAME, PATIENT.PT_GENDER,
		        EXTRACT(YEAR FROM TO_DATE(SYSDATE, 'RRRR-MM-DD')) - EXTRACT(YEAR FROM TO_DATE(PATIENT.PT_AGE, 'RRRR-MM-DD')) AS PtRealAge,
		        GROUP_LEADER
		FROM MATCHING
		        JOIN MAT_PT_INFO ON(MATCHING.MAT_NO = MAT_PT_INFO.MAT_NO)
		        JOIN PATIENT ON(MAT_PT_INFO.PT_NO = PATIENT.PT_NO)
		WHERE MATCHING.MAT_NO IN 
		<foreach collection="list" item="item" open="(" close=")" separator=",">${item}</foreach>
	</select>
	
	<!-- 간병인 일감찾기 : 검색조건 결과찾기 : 1번 -->
	<select id="searchDefaultMatNoList" resultType="map">
		SELECT DISTINCT MATCHING.MAT_NO, MAT_MODE
		FROM MATCHING
		        JOIN MAT_PT_INFO ON(MATCHING.MAT_NO = MAT_PT_INFO.MAT_NO)
		        JOIN PATIENT ON(MAT_PT_INFO.PT_NO = PATIENT.PT_NO)
		WHERE MAT_CONFIRM = 'N' AND BEGIN_DT > SYSDATE
		<if test="service != null">
			AND MAT_PT_INFO.SERVICE IN 
			<foreach collection="service" item="item" open="(" close=")" separator=",">
				#{item}
			</foreach>
		</if>
		<if test="share != null">
			AND MATCHING.PT_COUNT IN 
			<foreach collection="share" item="item" open="(" close=")" separator=",">
				#{item}
			</foreach>
		</if>
		<if test="area != null">
			AND MAT_PT_INFO.MAT_ADDRESS_INFO LIKE '%${area}%'
		</if>
		<if test="gender != null">
			AND PATIENT.PT_GENDER IN
			<foreach collection="gender" item="item" open="(" close=")" separator=",">
				#{item}
			</foreach>
		</if>
		<if test="age != null">
			<choose>
				<when test="age == 1"> <!-- 청년 -->
					AND EXTRACT(YEAR FROM TO_DATE(SYSDATE, 'RRRR-MM-DD')) - EXTRACT(YEAR FROM TO_DATE(PT_AGE, 'RRRR-MM-DD')) BETWEEN 0 AND 34
				</when>
				<when test="age == 2"> <!-- 중년 -->
					AND EXTRACT(YEAR FROM TO_DATE(SYSDATE, 'RRRR-MM-DD')) - EXTRACT(YEAR FROM TO_DATE(PT_AGE, 'RRRR-MM-DD')) BETWEEN 35 AND 59
				</when>
				<when test="age == 3"> <!-- 장년 -->
					AND EXTRACT(YEAR FROM TO_DATE(SYSDATE, 'RRRR-MM-DD')) - EXTRACT(YEAR FROM TO_DATE(PT_AGE, 'RRRR-MM-DD')) <![CDATA[>=]]> 60
				</when>
				<when test="age == 4"> <!-- 청년 and 중년 -->
					AND EXTRACT(YEAR FROM TO_DATE(SYSDATE, 'RRRR-MM-DD')) - EXTRACT(YEAR FROM TO_DATE(PT_AGE, 'RRRR-MM-DD')) <![CDATA[<=]]> 59
				</when>
				<when test="age == 5"> <!-- 청년 and 장년 -->
					AND EXTRACT(YEAR FROM TO_DATE(SYSDATE, 'RRRR-MM-DD')) - EXTRACT(YEAR FROM TO_DATE(PT_AGE, 'RRRR-MM-DD')) NOT BETWEEN 35 AND 59
				</when>
				<when test="age == 6"> <!-- 중년 and 장년 -->
					AND EXTRACT(YEAR FROM TO_DATE(SYSDATE, 'RRRR-MM-DD')) - EXTRACT(YEAR FROM TO_DATE(PT_AGE, 'RRRR-MM-DD')) <![CDATA[>=]]> 35
				</when>
			</choose>
		</if>
		<if test="cost != null">
			AND MATCHING.MONEY <![CDATA[<=]]> ${cost}
		</if>
		ORDER BY MATCHING.MAT_NO DESC
	</select>
	
	
	<select id="searchTermMatNoList" resultType="_int">
		SELECT MATCHING.MAT_NO
		FROM MATCHING
		WHERE MATCHING.MAT_NO IN
		<foreach collection="termMatNoList" item="item" open="(" close=")" separator=",">${item}</foreach>
		<if test="term != '16'">
        	AND END_DT - BEGIN_DT <![CDATA[<=]]> ${term}
        </if>		
        <if test="term == '16'">
        	AND END_DT - BEGIN_DT <![CDATA[>=]]> ${term}
        </if>	 	
	 	ORDER BY MATCHING.MAT_NO DESC
	</select>
	
	<select id="searchTimeMatNoList" resultType="_int">
		SELECT MATCHING.MAT_NO
		FROM MATCHING
		        JOIN MATCHING_DATE ON(MATCHING.MAT_NO = MATCHING_DATE.MAT_NO)
		WHERE MATCHING.MAT_NO IN 
		<foreach collection="timeMatNoList" item="item" open="(" close=")" separator=",">${item}</foreach>
        <if test="term != '16'">
        	AND length(MATCHING_DATE.MAT_DATE) <![CDATA[<=]]> 11 * ${term} - 1
        </if>		
        <if test="term == '16'">
        	AND length(MATCHING_DATE.MAT_DATE) <![CDATA[>=]]> 11 * ${term} - 1
        </if>		
	 	ORDER BY MATCHING.MAT_NO DESC
	</select>
	
	<select id="searchCategoryMatNoList" resultType="map">
		SELECT MATCHING.MAT_NO, CATEGORY_NO
		FROM MATCHING
		        JOIN MAT_PT_INFO ON(MATCHING.MAT_NO = MAT_PT_INFO.MAT_NO)
		        JOIN PATIENT ON(MAT_PT_INFO.PT_NO = PATIENT.PT_NO)
		        JOIN MEMBER_INFO ON(PATIENT.MEMBER_NO = MEMBER_INFO.MEMBER_NO)
		WHERE MATCHING.MAT_NO IN 
		<foreach collection="list" item="item" open="(" close=")" separator=",">${item}</foreach>
		ORDER BY MATCHING.MAT_NO
	</select>
	
	<!-- 간병인 숫자 조회 -->
	<select id="getCaregiverListCount" resultType="_int">
		SELECT COUNT(*)
		FROM MEMBER
		WHERE MEMBER_STATUS = 'N' AND MEMBER_CATEGORY = 'C'
	</select>
	
	<!-- 환자의 간병인찾기 : 모든 간병인에 대한 정보조회 -->
	<select id="selectAllCaregiver" resultType="CareGiver">
		SELECT MEMBER.MEMBER_NO, MEMBER_NAME, MEMBER_GENDER, 
		        EXTRACT(YEAR FROM TO_DATE(SYSDATE, 'RRRR-MM-DD')) - EXTRACT(YEAR FROM TO_DATE(MEMBER_AGE, 'RRRR-MM-DD')) AS caregiverRealAge,
		        MEMBER_NATIONAL AS caregiverNational, CARE_IMG
		FROM MEMBER
		        JOIN CAREGIVER ON(MEMBER.MEMBER_NO = CAREGIVER.MEMBER_NO)
		WHERE MEMBER_STATUS = 'N' AND MEMBER_CATEGORY = 'C'
		ORDER BY MEMBER.MEMBER_NO DESC
	</select>
	
	<!-- 위의 간병인에 대한 평점 조회 -->
	<select id="getCaregiverScoreList" resultType="map">
		SELECT CAREGIVER.MEMBER_NO, NVL(TRUNC(AVG(REVIEW_SCORE)), 0) as avgReviewScore, COUNT(REVIEW_SCORE) AS REVIEWCOUNT
		FROM CAREGIVER 
		       LEFT JOIN CARE_REVIEW ON(CAREGIVER.MEMBER_NO = CARE_REVIEW.MEMBER_NO)
		WHERE CAREGIVER.MEMBER_NO IN
		<foreach collection="list" item="item" open="(" close=")" separator=",">${item}</foreach>
		GROUP BY CAREGIVER.MEMBER_NO
	</select>
	
	<!-- 환자의 간병인찾기 : 기본적인 검색조건으로 1차 검색 -->
	<select id="searchDefaultCaregiverNoList" resultType="CareGiver">
	SELECT MEMBER.MEMBER_NO, MEMBER_NAME, MEMBER_GENDER, 
	        EXTRACT(YEAR FROM TO_DATE(SYSDATE, 'RRRR-MM-DD')) - EXTRACT(YEAR FROM TO_DATE(MEMBER_AGE, 'RRRR-MM-DD')) AS caregiverRealAge,
	        MEMBER_NATIONAL AS caregiverNational, CARE_IMG
	FROM MEMBER
	        JOIN CAREGIVER ON(MEMBER.MEMBER_NO = CAREGIVER.MEMBER_NO)
	WHERE MEMBER_STATUS = 'N' 
	        AND MEMBER_CATEGORY = 'C'
	    <if test="share != null"> AND CARE_JOIN_STATUS IN 
	    	<foreach collection="share" item="item" open="(" close=")" separator=",">#{item}</foreach>
	    </if>
		<if test="area != null">AND MEMBER_ADDRESS LIKE '%${area}%'</if>	       
		<if test="gender != null"> AND MEMBER_GENDER IN
			<foreach collection="gender" item="item" open="(" close=")" separator=",">#{item}</foreach>
		</if>	    
		<if test="age != null">
			<choose>
					<when test="age == 1"> <!-- 청년 -->
						AND EXTRACT(YEAR FROM TO_DATE(SYSDATE, 'RRRR-MM-DD')) - EXTRACT(YEAR FROM TO_DATE(MEMBER_AGE, 'RRRR-MM-DD')) BETWEEN 0 AND 34
					</when>
					<when test="age == 2"> <!-- 중년 -->
						AND EXTRACT(YEAR FROM TO_DATE(SYSDATE, 'RRRR-MM-DD')) - EXTRACT(YEAR FROM TO_DATE(MEMBER_AGE, 'RRRR-MM-DD')) BETWEEN 35 AND 59
					</when>
					<when test="age == 3"> <!-- 장년 -->
						AND EXTRACT(YEAR FROM TO_DATE(SYSDATE, 'RRRR-MM-DD')) - EXTRACT(YEAR FROM TO_DATE(MEMBER_AGE, 'RRRR-MM-DD')) <![CDATA[>=]]> 60
					</when>
					<when test="age == 4"> <!-- 청년 and 중년 -->
						AND EXTRACT(YEAR FROM TO_DATE(SYSDATE, 'RRRR-MM-DD')) - EXTRACT(YEAR FROM TO_DATE(MEMBER_AGE, 'RRRR-MM-DD')) <![CDATA[<=]]> 59
					</when>
					<when test="age == 5"> <!-- 청년 and 장년 -->
						AND EXTRACT(YEAR FROM TO_DATE(SYSDATE, 'RRRR-MM-DD')) - EXTRACT(YEAR FROM TO_DATE(MEMBER_AGE, 'RRRR-MM-DD')) NOT BETWEEN 35 AND 59
					</when>
					<when test="age == 6"> <!-- 중년 and 장년 -->
						AND EXTRACT(YEAR FROM TO_DATE(SYSDATE, 'RRRR-MM-DD')) - EXTRACT(YEAR FROM TO_DATE(MEMBER_AGE, 'RRRR-MM-DD')) <![CDATA[>=]]> 35
					</when>
				</choose>
		</if>
		<if test="maxMoney != null">AND MAX_MONEY <![CDATA[<=]]> ${maxMoney}</if>	        
	</select>
	
	<!-- 환자의 간병인찾기 : 카테고리 검색조건으로 2차 검색 -->
	<select id="searchCaregiverCategoryMNoList" resultType="map">
		SELECT MEMBER_NO, CATEGORY_NO
		FROM MEMBER_INFO 
		WHERE MEMBER_NO IN 
		<foreach collection="list" item="item" open="(" close=")" separator=",">${item}</foreach>
	</select>
	
	<!-- 페이징 처리를 한 간병인 목록 조회 -->
	<select id="searchCaregiverList" resultType="CareGiver">
		SELECT MEMBER.MEMBER_NO, MEMBER_NAME, MEMBER_GENDER, 
		        EXTRACT(YEAR FROM TO_DATE(SYSDATE, 'RRRR-MM-DD')) - EXTRACT(YEAR FROM TO_DATE(MEMBER_AGE, 'RRRR-MM-DD')) AS caregiverRealAge,
		        MEMBER_NATIONAL AS caregiverNational, CARE_IMG
		FROM MEMBER
		        JOIN CAREGIVER ON(MEMBER.MEMBER_NO = CAREGIVER.MEMBER_NO)
		WHERE MEMBER.MEMBER_NO IN 
		<foreach collection="list" item="item" open="(" close=")" separator=",">${item}</foreach>
		ORDER BY MEMBER_NO DESC
	</select>
	
	<insert id="nn">
		insert into member_info values(
			115,11
		)
	</insert>
	
	<!-- 나(환자)에게 매칭 신청한 사람 목록 -->
	<select id="getRequestCaregiver" resultType="CareGiverMin">
		select careGiver.member_no, careGiver.care_img, member.member_national, member.member_gender, member.member_name, member.member_age,  matching.mat_no
		from careGiver
			join member on (careGiver.member_no = member.member_no)
			join mat_care_pending on (member.member_no = mat_care_pending.member_no)
			join matching on (mat_care_pending.mat_no = matching.mat_no)
			join mat_pt_info on (matching.mat_no = mat_pt_info.mat_no)
		where  mat_pt_info.pt_no = #{ptNo}
			and matching.begin_dt > sysdate
			and mat_confirm = 'N'			 
	</select>
	
	<!-- 간병인 후기 조회 -->
	<select id="caregiverReviewList" resultType="CareReview">
		select *
		from care_review cr
		    join patient p on(p.pt_no = cr.pt_no)
		where cr.member_No = #{memberNo}
		
		
	</select>
	
	<!-- 월간 점수 -->
	<select id="monthScoreList" resultType="CareReview">
		select to_char(end_dt, 'YYYY-MM') as month, sum(review_score) "sumScore", avg(review_score) "avgScore", sum(money) sumMoney
		from (select cr.review_No, cr.review_score, m.end_dt, cr.member_no, m.money
		     from care_review cr
		     join patient p on p.pt_no = cr.pt_no
		     join matching m on cr.mat_no = m.mat_no
		     where cr.member_no = #{memberNo})
		group by to_char(end_dt, 'YYYY-MM')
	</select>
	
	<!-- 평균점수 -->
	<select id="sumAvgScore" resultType="CareReview">
		select sum(review_score) sumScore, avg(review_score) avgScore, count(review_score) countReview
		from care_review
		where member_no = #{memberNo}
	</select>
	
	<!-- 월별 정보 -->
	<select id="useMonth" resultType="MatMatptInfoPt">
		select to_char(end_dt, 'YYYY-MM') as month, sum(end_dt - begin_dt) useCount, sum(ante_pay) ante_pay
		from matching
		    join mat_pt_info using(mat_no)
		where pt_no = #{ptNo} and mat_confirm != 'N'
		group by to_char(end_dt, 'YYYY-MM')
		order by  to_char(end_dt, 'YYYY-MM')
	</select>
	
	<!-- 후기 작성 유무 -->
	<select id="selectReviewYn" resultType="_int">
		select count(review_no)
		from care_review
		where mat_no = #{matNo} and pt_no = #{ptNo} and review_status='Y'
	</select>
	
	<select id="avgReviewScore2" resultType="Double">
		select round(avg(review_score),2)
		from care_review
		where member_no=#{memberNo} and review_status='Y'
	</select>
	
	<select id="selectMatListPay" resultType="MatMatptInfo">
		select *
		from mat_pt_info
    		left join matching ON mat_pt_info.mat_no = matching.mat_no
            left join member on matching.member_no =member.member_no
            left join caregiver on matching.member_no = caregiver.member_no
		where mat_confirm != 'N' and pt_no = (select pt_no
						from patient
						where member_no = #{memberNo})
	</select>
	
	<!-- 매칭이력 -->
	<select id="selectMatRecord" resultType="MatMatptInfoPt" >
		select distinct(mc.mat_no), p.pt_name,mc.begin_dt, mc.end_dt, p.pt_age, p.pt_gender,mc.money,mpi.service, p.pt_address
		from matching mc
		    left join mat_pt_info mpi on(mc.mat_no = mpi.mat_no)
		    left join patient p on(p.pt_no = mpi.pt_no)
		    left join member m on(m.member_no = p.member_no)
		where mc.member_no=#{memberNo} and mat_confirm = 'Y' and sysdate > end_dt
		order by mc.mat_no
	</select>
	
	<!-- 원간 수익/ 이용자수 -->
	<select id="monthCountList" resultType="MatMatptInfoPt">
		select to_char(m.end_dt, 'YYYY-MM') as month, sum(m.end_dt - m.begin_dt) useCount, sum(p.pay_money) money
		from matching m
		   join pay p on(m.mat_no=p.mat_no) 
		where m.member_NO = #{memberNo}  <!--and p.pay_deposit = 'N'-->
		group by to_char(m.end_dt, 'YYYY-MM')
	</select>
	
	<!-- 프로필 사진 넣기 -->
	<update id="updateImageProfile">
		update caregiver
		set care_img = #{rename}
		where member_no = #{memberNo}
	
	</update>
	
	<!-- 이전 프로필사진 찾기 -->
	<select id="selectProfile" resultType="CareGiver">
		select care_img
		from caregiver
		where member_no = #{memberNo}
	</select>
	
	<!-- 늦엇지만 계정탈퇴하기 -->
	<update id="deleteMember">
		update member
		set member_status = 'N'
		where member_no = #{memberNo}
	
	</update>
	
	<!-- 간병인 시 결제대금 조회하기 -->
	<select id="selectPayTransfer" resultType="Pay">
		select *
		from pay
		where mat_no in(select mat_no
						from matching 
						where member_no = #{memberNo}) and pay_deposit = 'Y'
	
	</select>
	
	<!-- 이미 신청한 환자 매칭방인지 확인 -->
	<select id="getCountPendingMe" resultType="_int">
		select count(*)
		from mat_care_pending
		where mat_no = #{matNo} and member_no = #{memberNo}		
	</select>
	
	
	<select id="getCountPt" resultType="_int">
		select count(*)
		from mat_pt_info
		where mat_no = #{matNo}	
	</select>
	
	<select id="findPwdResult" resultType ="Member">
		select *
		from member
		where member_id=#{memberId} and member_phone=#{memberPhone}
	</select>
	
	<select id="selectEndDateMat" resultType="Matching">
		select end_dt
		from matching
		where mat_no = #{matNo}
	</select>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
</mapper>