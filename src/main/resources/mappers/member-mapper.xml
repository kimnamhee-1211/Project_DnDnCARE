<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kh.dndncare.member.model.dao.MemberMapper">

	<!-- <select id="login" resultType="Member">
		select *
	 	from member
	 	where member_status = 'N' and member_id=#{memberId}
	</select> -->
	
	  <select id="login" resultType="Member">
	  	select *
	  	from member
	  	where member_status = 'N' and member_id=#{memberId}
	  </select>
	  
	  
	  <!-- 회원가입 중도탈출 멤버 데이터 삭제 -->
	  <update id="noInfomemberdle">
	  	update member
	  	set member_status = 'Y'
	  	where member_no NOT IN (select member_no from caregiver union select member_no from patient)	 
	  			and member_category != 'A'
	  </update>
	  	  
	  
	  <!-- 아이디 중복 확인 -->
	  <select id="idCheck" resultType="_int">
	  	select count(*)
	  	from member
	  	where member_id = #{id}	  
	  </select>
	  
	  <!-- 닉네임 중복 확인 -->
	  <select id="nickNameCheck" resultType="_int">
	  	select count(*)
	  	from member
	  	where member_nickname = #{nickNameCheck}	  
	  </select>
	  
	  
	  

	<!-- ResultMap : 캘린더에 적합도록 매핑 -->
	<resultMap type="CalendarEvent" id="calendarResultMap">
		<id column="MAT_NO" property="matNo"/>
	  	<result column="TITLE" property="title"/>
		<result column="BEGIN_DT" property="start"/>
		<result column="END_DT" property="end"/>
		<result column="MONEY" property="money"/>
		<result column="HOSPTAL_NO" property="hosptalNo"/>
		<result column="HOSPTAL_ADDRESS" property="hosptalAddress"/>
		<result column="HOSPTAL_NAME" property="hosptalName"/>
	</resultMap>
	  
	  
	  
	<select id="caregiverCalendarEvent" resultMap="calendarResultMap">
		SELECT MAT_NO, '간병하기' AS TITLE, BEGIN_DT, END_DT, MONEY, HOSPTAL_NO, HOSPTAL_ADDRESS, HOSPTAL_NAME 
		FROM MATCHING
		        JOIN HOSPTAL USING(HOSPTAL_NO)
		WHERE MEMBER_NO = #{memberNo}
	</select>

	  <select id="selectAllMember" resultType="Member">		<!-- 멤버좀 확인할라구요 -->
		select *
		from member	  
	  </select>
	  

	  <!-- 회원가입1(member) -->
	  <insert id="enroll"  useGeneratedKeys="true">
	  	<selectKey resultType="_int" keyProperty="memberNo" order="BEFORE">
	  		select seq_mid.nextval from dual 
	  	</selectKey>
	  	insert into member
	  	values(#{memberNo}, #{memberId}, #{memberPwd}, #{memberName}, #{memberGender}, 
	  			#{memberNickName}, #{memberAge}, #{memberPhone}, #{memberEmail}, sysdate,
	  		 	#{memberAddress}, #{memberCategory}, 'N', #{memberNational}, null, sysdate)  	
	  </insert>
	  
	  
	  <!-- 회원가입2(CareGiver) -->
	  <insert id="enrollCareGiver">
	  	insert into caregiver
	  	values(#{memberNo}, #{careImg}, #{careIntro}, 
	  			#{minMoney}, #{maxMoney}, #{careJoinStatus}, sysdate)	  
	  </insert>
	  
	 <!-- 정보 입력-->
	<insert id="enrollInfoCategory">
		<foreach collection="memberInfo" item="item"  open="INSERT ALL" close="SELECT * FROM DUAL">
			into member_Info values(#{memberNo}, #{item})
		</foreach>
	</insert>
	  
	  
	<!-- 회원가입3(Patient) -->
	<insert id="enrollPatient">
	  	insert into patient
	  	values(seq_pid.nextval, #{memberNo}, #{ptName}, #{ptGender}, #{ptAge}, 
	  			#{ptWeight}, #{ptHeight}, #{ptAddress}, #{ptRequest}, sysdate)	  
	  </insert>
	  
	  <select id="findIdResult" resultType="Member">
	  	select member_id,member_create_date,member_status,member_category,member_name
	  	from member
	  	where member_id=#{memberId} and member_phone=#{memberPhone}
	  </select>
	  
	  <!-- 환자정보 가져오기 -->
	  <select id="selectPatient" resultType="Patient">
	  	select *
	  	from patient
	  	where member_no = #{memberNo}
	  </select>
	  <!-- 환자 인포카테고리 -->
	  <update id="updatePassword">
	  	update member
	  	set member_pwd = #{newPwd}
	  	where member_id = #{memberId}
	  </update>
	  <!-- 간병인정보 가져오기 -->
	  <select id="selectCareGiver" resultType="CareGiver">
	  	select *
	  	from CAREGIVER
	  	where member_no = #{memberNo}
	  </select>
	  
	  
	  
	
	<!-- 간병인 메인페이지에서의 자동 추천을 위한 간병인 본인 정보 조회 -->
	<select id="getCaregiverInfo" resultType="map">
		SELECT DECODE(MEMBER_GENDER, 'M', '남성', 'F', '여성') AS "성별", TRUNC(SYSDATE - MEMBER_AGE) AS "나이", 
        SUBSTR(REPLACE(MEMBER_ADDRESS, '//', ' ') , INSTR(MEMBER_ADDRESS, ' ') ) AS "주소",
		        MEMBER_NATIONAL AS "국적"
		FROM MEMBER
		WHERE MEMBER_NO = ${memberNo}
	</select>
	<!-- 간병인 메인페이지에서의 자동 추천을 위한 간병인 본인 정보 조회 : 2번 -->
	<select id="getCaregiverExp" resultType="map">
		SELECT L_CATEGORY, S_CATEGORY
		FROM MEMBER
		        JOIN MEMBER_INFO USING(MEMBER_NO)
		        JOIN INFO_CATEGORY USING(CATEGORY_NO)
		WHERE MEMBER_NO = ${memberNo}
	</select>
	
	<!-- 간병인 메인페이지에서의 자동 추천을 위한 환자 후보군의 정보 조회 : 1번 -->
	<select id="selectPatientList" resultType="Patient">
		<![CDATA[
		SELECT *
		FROM   (SELECT  MEMBER.MEMBER_NO, PT_NAME, PT_GENDER, TRUNC(SYSDATE - PT_AGE) AS PT_REAL_AGE, 
						SUBSTR(REPLACE(PT_ADDRESS, '//', ' ') , INSTR(REPLACE(PT_ADDRESS, '//', ' '), ' ')+1) as PT_ADDRESS,
						MEMBER_NATIONAL, PT_WEIGHT, PT_HEIGHT, MAT_REQUEST, 
						BEGIN_DT, END_DT, MONEY, MAT_CONFIRM
		       FROM MATCHING 
		            JOIN MAT_PT_INFO USING(MAT_NO)
		            JOIN PATIENT USING(PT_NO)
		            JOIN MEMBER ON(PATIENT.MEMBER_NO = MEMBER.MEMBER_NO)
		       WHERE MEMBER_STATUS = 'Y' AND MAT_CONFIRM='N' AND PT_ADDRESS LIKE '%${caregiverCity}%'
		       ORDER BY DBMS_RANDOM.RANDOM)
		WHERE ROWNUM < 10
		]]>
	</select>
	
	<delete id="deleteWantInfo">		<!-- 내가원하는 상대매칭정보 -->
		delete want_info
		where member_no = #{memberNo}
		
	</delete>
	<insert id="insertWantInfo">		<!-- 내가 원하는 상대매칭 정보 -->
	insert into want_info values(
		${memberNo},
		${categoryNo}
	)
	
	</insert>
	<delete id="deleteMemberInfo">		<!-- 내 인포정보 -->
		delete member_info
		where member_no = #{memberNo}
		
	</delete>
	<insert id="insertMemberInfo">		<!-- 내 인포정보 -->
	insert into member_info values(
		${memberNo},
		${categoryNo}
	)
	</insert>
	
	<select id="selectWantInfo" resultType="map">
		SELECT L_CATEGORY, S_CATEGORY
		FROM MEMBER
		        JOIN want_INFO USING(MEMBER_NO)
		        JOIN INFO_CATEGORY USING(CATEGORY_NO)
		WHERE MEMBER_NO = ${memberNo}
	</select>
	
	<update id="updatePatient">
		update patient
		set pt_name = #{ptName}, pt_age = #{ptAge}, pt_weight = #{ptWeight}, pt_height = #{ptHeight}, pt_address = #{ptAddress}, pt_gender = #{ptGender}
		where member_no = #{memberNo}
	</update>
	
	<update id="updateMember">
		update member
		set member_Name = #{memberName}, member_gender = #{memberGender},
		member_nickName = #{memberNickName}, member_age= #{memberAge},
		member_phone = #{memberPhone},member_email = #{memberEmail},
		member_address = #{memberAddress},member_national = #{memberNational},
		member_update_date = sysdate
		where member_no = #{memberNo}
	</update>
	
	<update id="updateCareGiver">
		update caregiver
		set care_intro = #{careIntro}, min_money = #{minMoney}, max_money = ${maxMoney},care_Update_Date = sysdate, care_join_status = #{careJoinStatus}
		where member_no = #{memberNo}
	</update>
	
	<update id="updateMemberVer2">
		update member
		set member_name = #{memberName}, member_gender = #{memberGender},member_age = #{memberAge}
		where member_no =#{memberNo}	

	</update>

	<select id="mySelectBoardList" resultType="Board">
		select board_no, category_name, board_title, area_name, board_create_date, board_count
			from board
				join b_category using(category_no)
				join area using(area_no)
				join member using(member_no)
			where member_no = #{mNo}and board_status = 'Y'
	</select>
	
	<select id="getBoardListCount" resultType="_int">
		select count(*)
        from board b
   	    where b.board_status = 'Y' and member_no = #{mNo}
   	   </select>
	
	<select id="boardLikeCount" resultType="_int">
		select count(*)
		from board_like
			join board using(board_no)
		where board_no = #{boardNo} and board_status = 'Y'
	</select>
	
	<select id="getReplyListCount" resultType="_int">
		select count(*)
		from reply r
		where r.reply_status = 'Y' and member_no = #{mNo}
	</select>
	
	<select id="mySelectReplyList" resultType="Reply">
		select b.board_title,r.ref_board_no, c.category_name, r.reply_content, r.reply_create_date, r.reply_no
		from board b
			join b_category c on(c.category_no = b.category_no)
			join reply r on(board_no = ref_board_no)
		where b.member_no = #{mNo} and r.reply_status = 'Y'
	</select>
	
	<select id="replyLikeCount" resultType="_int">
		select count(*)
		from reply_like l
			join reply r on(r.reply_No = l.reply_No)
		where l.reply_no = #{replyNo} and r.reply_status = 'Y'
	</select>
	
	<select id="getLikeListCount" resultType="_int">
		select count(*)
		from board_like l
			join board b on(b.board_no = l.board_no)
		where b.board_status = 'Y' and l.member_no = #{mNo}
	</select>
	
	<select id="mySelectLikeList" resultType="Board">
		select b.board_no, c.category_name, b.board_title, a.area_name, b.board_create_date, b.board_count
		from board b
			join board_like l on(b.board_no = l.board_no)
			join b_category c on(c.category_no = b.category_no)
			join area a on(a.area_no = b.area_no)
		where l.member_no = #{mNo} and b.board_status = 'Y'
	</select>
	
	<select id="likeLikeCount" resultType="_int">
		select count(*)
		from board_like l
			join board b on(l.board_no = b.board_No)
		where l.board_no = #{boardNo} and b.board_status = 'Y'
	</select>
	<select id="selectMatList" resultType="MatMatptInfo">	<!-- 환자번호로 mat_pt테이블의 매칭번호를 뽑아온다. -->
		select *
		from mat_pt_info
    		join matching using(mat_no)
		where pt_no = (select pt_no
						from patient
						where member_no = #{memberNo})
	</select>
</mapper>