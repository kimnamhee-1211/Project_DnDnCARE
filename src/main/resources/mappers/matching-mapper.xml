<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kh.dndncare.matching.model.dao.MatchingMapper">


	<!-- 병원 테이블 등록 -->
	<insert id="enrollHospital" useGeneratedKeys="true">
		<selectKey resultType="_int" keyProperty="hospitalNo" order="BEFORE">
			select seq_hid.nextval from dual
		</selectKey>	
		insert into hospital
		values(#{hospitalNo}, #{hospitalAddress}, #{hospitalName})
	</insert>

	<!-- 매칭 테이블 등록 -->
	<insert id="enrollMatching" useGeneratedKeys="true">
		<selectKey resultType="_int" keyProperty="matNo" order="BEFORE">
			select seq_macid.nextval from dual
		</selectKey>	
		insert into matching
		values(#{matNo}, #{beginDt}, #{endDt}, #{money}, default, #{hospitalNo}, null, #{ptCount}, #{beginTime}, #{endTime},#{matMode})
	</insert>
	
	<!-- 매칭 pt info 테이블 등록 -->   
   <insert id="enrollMatPtInfo">   
      insert into mat_pt_info
      values(#{matNo}, #{ptNo}, #{antePay}, #{service}, #{matAddressInfo}, #{matRequest}, default, #{groupLeader})
   </insert>
	
	<!-- pt get -->
	<select id="getPatient" resultType="Patient">
		select *
		from patient
		where member_no = #{memberNo}
	</select>
	

	<!-- 공동 간병 리스트 get -->
	<select id="getJmList" resultType="MatMatptInfo">
		select *
		from hospital
			join matching using(hospital_no) 
			join mat_pt_info on(matching.mat_no = mat_pt_info.mat_no) 			
		where hospital_name = #{hospitalName} and group_leader = 'Y'
			and matching.end_dt > sysdate
		order by matching.begin_dt
	</select>

	<!-- 공동 간병 정보 get -->
	<select id="getMatMatptInfo" resultType="MatMatptInfo">
		select *
		from hospital
			join matching on(hospital.hospital_no = matching.hospital_no) 
			join mat_pt_info on(matching.mat_no = mat_pt_info.mat_no) 			
		where matching.mat_no = #{matNo} and mat_pt_info.group_leader = 'Y'
	</select>

	
	<!-- MatNo로 get 공동 간병 참여자들 Patient -->
	<select id="getPatientToMatNo" resultType="Patient">
		select *
		from patient
		where patient.pt_no in (select pt_no
								from mat_pt_info
								where mat_no = #{mat_no})	
	</select>
	
	<!-- get member info (대분류 : 소분류) -->
	<select id="getInfo" resultType="InfoCategory">
		select l_category, s_category
		from member_info 
			join info_category using(category_no)
			join patient on(member_info.member_no = patient.member_no)
		where patient.pt_no = #{ptNo}	
	</select>
	
	<!--  리뷰리스트 -->
	<select id="selectReviewList" resultType="CareReview">
		select *
		from care_review r
			join patient p on(p.pt_no = r.pt_no)
			join member m on(m.member_no = r.member_no)
		where review_status ='Y' and r.member_no = #{memberNo}
		order by review_create_date desc
	</select>
	
	<!-- 병원 get : 병원 존재 유무 확인-->
	<select id="getHospital" resultType="Hospital">
		select *
		from hospital
		where hospital_name = #{hospitalName} 
				<!-- and hospital_address like '%${hospitalAddress}%'	-->
	</select>
	
	<!-- loginUser-MatNo get -->
	<select id="getloginMatNo" resultType="_int">
		select mat_no
		from mat_pt_info
			join patient on(mat_pt_info.pt_no = patient.pt_no)
		where patient.member_no = #{memberNo}	
	</select>
	
	<!-- loginUser-PtNo get-->
	<select id="getPtNo" resultType="_int">
		select pt_no
		from patient
		where member_no = #{memberNo}
	</select>
	
	
	<!-- 시간제일 경우 선택한 날짜 get -->	
	<select id="getMatDate" resultType="string"> 
		select mat_date
		from matching_date
		where mat_no = #{matNo}	
	</select>
	
	
	<!--MatPtInfo del  -->
	<delete id="delMatPtInfo">
		delete mat_pt_info
		where mat_no = #{matNo} and pt_no = #{ptNo}
	</delete>
	

	<!-- 매칭에 참여하고 잇는 인원이 몇인지 => 매칭 table 한 튜플에 따른 matPtInfo 테이블 튜플 수 -->
	<select id="joinPtCount" resultType="_int">
		select count(*)
		from mat_pt_info
		where mat_no = #{matNo}	
	</select>
	
	<!--매칭 테이블 del  -->
	<delete id="delMatching">
		delete matching
		where mat_no = #{matNo}
	</delete>
	
	<!-- 매칭date 테이블 del -->
	<delete id="delMatchingDate">
		delete matching_date
		where mat_no = #{matNo}
	</delete>
	
	
	<!-- 간병인 후기수 -->
	<select id="reviewCount" resultType="_int">
		select count(*)
		from care_review
		where member_no=#{memberNo} and review_status='Y'
	</select>
	
	<!-- 간병인 평점 -->
	<select id="avgReviewScore" resultType="Double">
		select round(avg(review_score),2)
		from care_review
		where member_no=#{memberNo} and review_status='Y'
	</select>
	
	<!-- 받아온 patient정보로 수정 -->
	<update id="updatePatient">
		update patient
		set pt_name = #{ptName},
			pt_gender= #{ptGender},
			pt_age = #{ptAge},
			pt_weight=#{ptWeight},
			pt_height=#{ptHeight},
			pt_address=#{ptAddress},
			pt_update_date=sysdate
		where pt_no = #{ptNo}
	</update>
	
	<!-- matching_date insert 남희-->	
	<insert id="insertMatDate">
		insert into matching_date
		values(#{matNo},#{matDate})
	</insert>
	

	<!-- matching_date insert 기룡-->	
	<insert id="insertMatchingDate">
      insert into matching_date
      values(#{matNo},#{formattedDates})
   </insert>
	
	
	<!-- mat_no 얻어오기 -->
	<select id="getMatNo" resultType="_int">
		select mat_no
		from mat_pt_info
		where pt_no = #{ptNo}
	</select>

	
	<!-- want_info insert -->
	<insert id="insertWantInfo">
    	INSERT ALL
	    <if test="gender != null">
	        INTO want_info (member_no, category_no) VALUES (#{memberNo}, #{gender})
	    </if>
	    <if test="career != null">
	        INTO want_info (member_no, category_no) VALUES (#{memberNo}, #{career})
	    </if>
	    <if test="local != null">
	        INTO want_info (member_no, category_no) VALUES (#{memberNo}, #{local})
	    </if>
	    <if test="age != null">
	        INTO want_info (member_no, category_no) VALUES (#{memberNo}, #{age})
	    </if>
	    SELECT * FROM DUAL
	</insert>
	
	<!-- member_info delete -->
	<delete id="deleteMemberInfo">
    DELETE FROM member_info
    WHERE member_no = #{memberNo}
    AND (
        category_no IN
        <foreach item="symptom" collection="symptoms" open="(" separator="," close=")">
            #{symptom}
        </foreach>
        <if test="selectedDiseaseLevels != null and selectedDiseaseLevels.size() > 0">
            OR category_no IN
            <foreach item="selectedDiseaseLevel" collection="selectedDiseaseLevels" open="(" separator="," close=")">
                #{selectedDiseaseLevel}
            </foreach>
        </if>
        <if test="mobility != null">
            OR category_no = #{mobility}
        </if>
        <if test="service != null">
            OR category_no = #{service}
        </if>
    )
	</delete>
	
	<!-- member_info insert -->
 	<insert id="insertMemberInfo">
 		INSERT ALL
	    <if test="symptoms != null and symptoms.size() > 0">
	        <foreach collection="symptoms" item="symptom">
	            INTO member_info (member_no, category_no) VALUES (#{memberNo}, #{symptom})
	        </foreach>
	    </if>
	    <if test="selectedDiseaseLevels != null and selectedDiseaseLevels.size() > 0">
	        <foreach collection="selectedDiseaseLevels" item="selectedDiseaseLevel">
	            INTO member_info (member_no, category_no) VALUES (#{memberNo}, #{selectedDiseaseLevel})
	        </foreach>
	    </if>
	    <if test="mobility != null">
	        INTO member_info (member_no, category_no) VALUES (#{memberNo}, #{mobility})
	    </if>
	    INTO member_info (member_no, category_no) VALUES (#{memberNo}, #{service})
	     SELECT * FROM DUAL
 	</insert>
    
	<!-- want-info 삭제 -->
	<delete id="deleteWantInfo">
		delete from want_info
		where member_no = #{memberNo}
	</delete>
	

	<!-- 매칭/매칭인포/환자/병원 한번에 가져오기  -->
	<select id="matPtInfoToCaregiver" resultType="MatMatptInfoPt">
		select *
		from matching
			left join mat_pt_info on(matching.mat_no = mat_pt_info.mat_no) 	
			left join patient on(mat_pt_info.pt_no = patient.pt_no)	
			left join hospital on(hospital.hospital_no = matching.hospital_no)
			left join matching_date on(matching.mat_no = matching_date.mat_no) 		
		where matching.mat_no = #{matNo}
		order by mat_pt_info.pt_no 
	</select>

	<!-- 간병인 매칭 신청 : mat_care_pending에 간병인 memberNo 넣기 -->
	<insert id="requestMatching">
		insert into mat_care_pending
		values(#{matNo}, #{memberNo})
	</insert>
	
	<!-- pt 이름 뽑기(공동간병일 경우 방 개설자) -->
	<select id="getMatPtName" resultType="string">
		select patient.pt_name
		from patient
			join mat_pt_info on(patient.pt_no = mat_pt_info.pt_no)
			join matching on(mat_pt_info.mat_no = matching.mat_no)
		where mat_pt_info.mat_no = #{matNo}
		<if test="ptCount > 1">
			and mat_pt_info.group_leader = 'Y'
		</if>
	</select>

	<!-- //매칭방에 이미 매칭 신청을 한 간병인인지 아닌지 확인 -->
	<select id="requestMatCheck" resultType="_int">
		select count(*)
		from mat_care_pending
		where member_no = #{memberNo} and mat_no = #{matNo}
	</select>

	<!-- 나(간병인)의 현재 매칭 정보 list용-->
	<select id="getMyMatching" resultType="MatMatptInfoPt">
		select matching.mat_no, matching.pt_count, mat_pt_info.group_leader, 
			patient.pt_name, patient.pt_gender, patient.pt_age, matching.mat_confirm,
			matching.begin_dt, matching.end_dt
		from matching
			join mat_pt_info on(matching.mat_no = mat_pt_info.mat_no) 	
			join patient on(mat_pt_info.pt_no = patient.pt_no)	
			left join hospital on(hospital.hospital_no = matching.hospital_no)
			left join matching_date on(matching.mat_no = matching_date.mat_no) 		
		where matching.member_no = #{memberNo}	
		order by matching.begin_dt	
	</select>
	
	

	<!--간병인의 매칭 신청 내역 list용-->
	<select id="getMyRequestMat" resultType="MatMatptInfoPt">
		select matching.mat_no, matching.pt_count, mat_pt_info.group_leader, patient.pt_name, patient.pt_gender, patient.pt_age
		from matching
			join mat_pt_info on(matching.mat_no = mat_pt_info.mat_no) 	
			join patient on(mat_pt_info.pt_no = patient.pt_no)	
			left join hospital on(hospital.hospital_no = matching.hospital_no)
			left join matching_date on(matching.mat_no = matching_date.mat_no) 	
			left join mat_care_pending on(matching.mat_no = mat_care_pending.mat_no)
		where matching.mat_confirm = 'N' and matching.begin_dt > sysdate
				and mat_care_pending.member_no = #{memberNo}
		order by matching.begin_dt		
	</select>

	<!--matching테이블에 간병인 memberNo들어왔는지 확인 -->
	<select id="getMatMemberNo" resultType="integer">
		select member_no
		from matching
		where matching.mat_no = #{matNo}
	</select>

	<!-- 간병인의 매칭 승낙 -->
	<update id="matchingApproveC">
		update matching
		set mat_confirm = 'W'
		where mat_no = #{matNo} and member_no = #{memberNo}
	</update>

	<!-- 간병인 정보 조회 -->
	<select id="selectIntro" resultType="Caregiver">
		select * 
		from careGiver
			join member using(member_no)
		where member_no = #{memberNo}
	</select>
	
	<!-- 결제정보가져오려는 셀렉트 매칭 정보 -->
	<select id="selectMatching" resultType="MatMatptInfo">
		select *
		from matching
			join member using(member_no)
		where mat_no = #{matNo}
	</select>

	<!-- 간병인 정보 -->
	<select id="selecMatPtInfo" resultType="MatMatptInfo">
		select *
		from mat_pt_info
		where mat_no = #{matNo} and pt_no = (select pt_no from patient where member_no = #{memberNo})
	</select>

	<!--  리뷰작성  -->
	<insert id="insertReview">
		<selectKey resultType="_int" keyProperty="reviewNo" order="BEFORE">
			select seq_crid.nextval from dual
		</selectKey>	
		insert into care_review
		values(#{reviewNo}, #{ptNo}, #{matNo}, #{reviewContent}, #{reviewScore}, sysdate, sysdate, 'Y', #{memberNo})
	</insert>
	
	<insert id="insertPay">
		insert into pay values(
			seq_pay.nextval,
			#{p.matNo},
			#{loginUser.memberNo},
			sysdate,
			#{p.payMoney},
			#{loginUser.memberName},
			#{loginUser.memberPhone},
			#{loginUser.memberEmail},
			#{p.mercharntUid},
			#{p.payService},
			'Y'
		)
	</insert>
	<select id="selectMatDate" resultType="String">
		select mat_date
		from matching_date
		where mat_no = #{matNo} 
	</select>
	
	<!-- 리뷰삭제 -->
	<update id="deleteReview">
		update care_review
		set review_status = 'N'
		where review_no = #{reviewNo}
	</update>
	
	<!-- member의 category  -->
	<select id="getCaregiverInfo" resultType="InfoCategory">
		select l_category, s_category
		from member_info 
			join info_category using(category_no)
		where member_no = #{memberNo}
	</select>

	
	<!--//나(환자)의 현재 매칭 정보- 진행 + 결제대기 + 환자가 신청 -->
	<select id="getMyMatchingP" resultType="CareGiverMin">
		select matching.mat_no, matching.member_no, careGiver.care_img, member.member_national, 
				member.member_gender, member.member_name, member.member_age, mat_pt_info.group_leader,
				matching.end_dt, matching.begin_dt, matching.mat_confirm, matching.pt_count
		from careGiver
			join member on (careGiver.member_no = member.member_no)
			join matching on (member.member_no = matching.member_no)
			join mat_pt_info on (matching.mat_no = mat_pt_info.mat_no)
		where  mat_pt_info.pt_no = #{ptNo}
	</select>
	
	<!--//나(환자)의 현재 매칭 정보- 간병인이 신청 -->
	<select id="getMyMatchingPN">
        select mat_care_pending.mat_no, mat_care_pending.member_no, careGiver.care_img, member.member_national, 
				member.member_gender, member.member_name, member.member_age, mat_pt_info.group_leader, matching.pt_count
		from careGiver
			join member on (careGiver.member_no = member.member_no)
			join mat_care_pending on (member.member_no = mat_care_pending.member_no)
			join matching on (mat_care_pending.mat_no = matching.mat_no)
			join mat_pt_info on (matching.mat_no = mat_pt_info.mat_no)
		where  mat_pt_info.pt_no = #{ptNo}	and matching.mat_confirm = 'N' and matching.begin_dt > sysdate
	</select>
	
	
	
	<!--//멤버 이름 얻어오기  -->
	<select id ="getNameC" resultType="string">
		select member_name
		from member
		where member_no = #{memberNo}	
	</select>
	

	<select id="getCategoryNo" resultType="int">
	    SELECT DISTINCT ic.category_no
		FROM info_category ic
			LEFT JOIN member_info mi ON ic.category_no = mi.category_no AND mi.member_no = #{memberNo}
			LEFT JOIN want_info wi ON ic.category_no = wi.category_no AND wi.member_no = #{memberNo}
		WHERE mi.member_no IS NOT NULL OR wi.member_no IS NOT NULL
	</select>

	<!-- //환자 -> 간병인 정보보기 ->  매칭 신청했을 경우 macthing 테이블에 간병인 memberNo 넣기ㄱ -->
	<update id="updateMatC">
		update matching
		set member_no = #{memberNoC}
		where mat_no = #{matNo}
	</update>


	<!-- 환자의 매칭 승낙 -->
	<update id="matchingApproveP">
		update matching
		set mat_confirm = 'W',
			member_no = #{memberNo}
		where mat_no = #{matNo}
	</update>

	
	<!--//환자가 이미 신청한 내역인지 확인  -->
	<select id ="requestCheck" resultType="_int">
		select member_no
		from matching
		where mat_no = #{matNo}	
	</select>
	

	<!-- 리뷰 수정 -->
	<update id="updateReview">
		update care_review
		set review_content = #{reviewContent}, review_score = #{reviewScore}, review_update_date = sysdate
		where review_no = #{reviewNo}
	</update>
	
	<update id="matchingCancelP">
		update matching
		set member_no = null
		where mat_no = #{matNo}
	</update>

	<!--간병인 매칭 신청 취소 -->
	<delete id="matchingCancelC">
		delete from mat_care_pending
		where mat_no = #{matNo}
			and member_no = #{memberNo}		
	</delete>

	<!-- 간병인 결제 대금 받기 -->
	<select id="selectPayTransfer2" resultType="Pay">
		select *
		from pay
		where mat_no in(select mat_no
						from matching 
						where member_no = #{memberNo}) and pay_deposit = 'Y'
	</select>	

	<!-- 간병인 결제 대금 받기 -->
	<insert id="insertPayTransfer">
		insert into pay values(
			seq_pay.nextval,
			#{p.matNo},
			#{loginUser.memberNo},
			sysdate,
			#{p.payMoney},
			#{loginUser.memberName},
			#{loginUser.memberPhone},
			#{loginUser.memberEmail},
			#{p.mercharntUid},
			#{p.payService},
			'N'
		)
	</insert>
	<!-- 통계용 서비스 -->
	<select id="serviceList" resultType="MatMatptInfo">
		select service, count(service) serviceCount
		from mat_pt_info
			join matching using(mat_no)
		where member_no = #{memberNo} and service != '개인간병'
		group by service
	</select>
	
	<!-- 통계용 매칭 환자 정보 -->
	<select id="matPatientList" resultType="Matching">
		select mc.mat_no, mc.begin_dt, mc.end_dt, mc.mat_confirm, p.pt_age, p.pt_gender, listagg(cn.s_category, ', ') within group (order by cn.s_category) s_category, mc.member_no
		from matching mc
		    left join mat_pt_info mpi on(mc.mat_no = mpi.mat_no)
		    left join patient p on(p.pt_no = mpi.pt_no)
		    left join member m on(m.member_no = p.member_no)
		    left join member_info mi on(m.member_no = mi.member_no)
		    left join info_category cn on(mi.category_no = cn.category_no)
		where mc.member_no=#{memberNo} and l_category = 'disease' and sysdate > end_dt
		group by mc.mat_no, mc.begin_dt, mc.end_dt, mc.mat_confirm, p.pt_age, p.pt_gender, mc.member_no
		order by mc.mat_no
	</select>
	
	<!--pt_count get  -->
	<select id="getPtCount" resultType="_int">
		select pt_count
		from matching
		where mat_no = #{matNo}	
	</select>

	
	<select id="getGroupLeader" resultType="string">
		select group_leader
		from mat_pt_info
		where mat_no = #{matNo} and pt_no = #{ptNo}	
	</select>
	
	<select id="getHospitalNo" resultType="java.lang.Integer">
	    SELECT NVL(hospital_no, 0) as hospital_no
	    FROM hospital
	    WHERE hospital_name = #{hospitalName}
	</select>
	
	<insert id="insertHospital" useGeneratedKeys="true">
		<selectKey resultType="_int" keyProperty="hospitalNo" order="BEFORE">
			select seq_hid.nextval from dual
		</selectKey>
		insert into hospital values(#{hospitalNo},#{hospitalAddress},#{hospitalName})	
	</insert>


	<select id="getMyJoinMat" resultType="joinMatInfoMin">
		select subquery.mat_no, subquery.pt_count, subquery.mat_mode,
				hospital.hospital_name, hospital.hospital_address, 
				patient.pt_no, patient.pt_name
		from (select mat_no, pt_count, hospital_no, end_dt, mat_mode
				from matching
					join mat_pt_info mpi_me using(mat_no)
				where mpi_me.pt_no = #{loginPt}
						and matching.pt_count > 1) subquery
			join hospital on(subquery.hospital_no = hospital.hospital_no)
			join mat_pt_info mpi on(subquery.mat_no = mpi.mat_no)
			join patient on(mpi.pt_no = patient.pt_no)
		where mpi.group_leader = 'Y' and subquery.end_dt > sysdate
	</select>
	
	<select id="getRequest">
		select PT_REQUEST
		from patient
		where member_no = #{memberNo}
	</select>




	<!-- 결제 승인된 결제대금 상태변경 -->
	<update id="updatePayTransfer">
		update Pay
		set pay_deposit = 'T'
		where pay_no =#{payNo}
	</update>
	








</mapper>
